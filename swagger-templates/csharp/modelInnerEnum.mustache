        {{^isContainer}}
        /// <summary>
        /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
        /// </summary>{{#description}}
        /// <value>{{{description}}}</value>{{/description}}
        [JsonConverter(typeof(StringEnumConverter))]
        public enum {{#datatypeWithEnum}}{{&.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}
        {
            {{#allowableValues}}{{#enumVars}}
            /// <summary>
            /// Enum {{name}} for {{{value}}}
            /// </summary>
            [EnumMember(Value = {{#isLong}}"{{/isLong}}{{#isInteger}}"{{/isInteger}}{{#isFloat}}"{{/isFloat}}{{#isDouble}}"{{/isDouble}}{{{value}}}{{#isLong}}"{{/isLong}}{{#isInteger}}"{{/isInteger}}{{#isDouble}}"{{/isDouble}}{{#isFloat}}"{{/isFloat}})]
            {{name}}{{#isLong}} = {{{value}}}{{/isLong}}{{#isInteger}} = {{{value}}}{{/isInteger}}{{^-last}},
            {{/-last}}{{/enumVars}}{{/allowableValues}}
        }

        /// <summary>
        /// This function is to convert the String Value to its correspoding Enum value
        /// </summary>
        public static {{#datatypeWithEnum}}{{&.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} To{{datatypeWithEnum}} (string str)
        {
            var enumType = typeof({{datatypeWithEnum}});
            foreach (var name in Enum.GetNames(enumType))
            {
                var enumMemberAttribute = ((EnumMemberAttribute[])enumType.GetField(name).GetCustomAttributes(typeof(EnumMemberAttribute), true)).Single();
                if (enumMemberAttribute.Value == str) return ({{datatypeWithEnum}})Enum.Parse(enumType, name);
            }
            return default({{datatypeWithEnum}});
        }

        /// <summary>
        /// This function is to convert the Enum Value to its correspoding String Value
        /// </summary>
        public static string {{datatypeWithEnum}}ToString({{datatypeWithEnum}} type)
        {
            var enumType = typeof({{datatypeWithEnum}});
            var name = Enum.GetName(enumType, type);
            var enumMemberAttribute = ((EnumMemberAttribute[])enumType.GetField(name).GetCustomAttributes(typeof(EnumMemberAttribute), true)).Single();
            return enumMemberAttribute.Value;
            
        }
        {{/isContainer}}
